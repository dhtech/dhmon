#!/usr/bin/env python2

import argparse
import dhmonpinger
import grp
import os
import pwd
import sqlite3
import sys
import threading
import time

import prometheus_client as prometheus


DEFAULT_ICMP_BUCKETS=(
    .000005, .00001, .000025, .00005, .000075, .0001, .00025, .0005, .00075,
    0.001, 0.0025, 0.005, 0.0075,
    0.01, 0.025, 0.05, 0.075,
    0.1, 0.25, 0.5, 0.75, 1.0, float('inf'))

icmp_rtt = None


def transmit(interval, hosts, sockfd):
  while True:
    db = sqlite3.connect('/etc/ipplan.db')
    cursor = db.cursor()
    sql = ("SELECT name, ipv4_addr_txt FROM host")

    # Mark current time as the datapoint time
    timestamp = int(time.time())
    hosts.update({ipv4: host for host, ipv4 in cursor.execute(sql).fetchall()})

    print '[%s]: Pinging' % timestamp
    for ip in hosts:
      dhmonpinger.transmit(sockfd, ip, timestamp)
    db.close()
    time.sleep(interval)


def main(port, interval):
  sockfd = dhmonpinger.create_socket()

  os.nice(-15)

  # Drop root privileges now when the socket is open
  uid = pwd.getpwnam('nobody').pw_uid
  gid = grp.getgrnam('nogroup').gr_gid
  os.setgid(gid)
  os.setuid(uid)

  # Map between IP and hostname.
  # Populated with all hosts we have ever pinged.
  hosts = {}

  transmit_thread = threading.Thread(
      target=transmit, args=(interval, hosts, sockfd))
  transmit_thread.daemon = True
  transmit_thread.start()

  prometheus.start_http_server(port)

  # TODO(bluecmd): Make this an iterator
  while True:
    ip, timestamp, secs, usecs = dhmonpinger.receive(sockfd)
    icmp_rtt.labels(hosts[ip]).observe(
        float(secs*1000000 + usecs)/10**6)

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument(
      '-p', '--port', default=13110, type=int, help='web port for results')
  parser.add_argument(
      '-i', '--interval', default=1.0, type=float,
      help='interval between pings')
  parser.add_argument(
      '-b', '--bucket', action='append', dest='bucket',
      default=DEFAULT_ICMP_BUCKETS, help='set ICMP RTT buckets')
  args = parser.parse_args()

  icmp_rtt = prometheus.Histogram(
      'icmp_rtt_seconds', 'ICMP RTT', ('host', ), buckets=args.bucket)
  main(args.port, args.interval)
